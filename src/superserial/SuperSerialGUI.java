/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package superserial;
import jssc.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.DefaultCaret;
import java.util.Timer;
import java.util.TimerTask;

/**
 * the GUI for the robot control and serial monitor
 * @author Carlton Johnson
 */
public class SuperSerialGUI extends javax.swing.JFrame {
    private String comPort="COM5";
    private SerialPort s;
    private methods M=new methods();
    private Generation G;
    private Individual I;
    private int indNum, genNum, sendStringTimeout=0;
    private static boolean readFlag=true;
    private int sensorTimes[]={0,0,0,0,0,0,0,0,0,0};
    private int lastSeen;
    private int sensorVals[]={0,0,0,0,0,0,0,0};
    private String sensorRead="";
    private long time;
    public static int speed=0;
    public static boolean keypressed=false, sendStringBool=false;
    /**
     * Creates new form SuperSerialGUI
     */
    public SuperSerialGUI() {
        String[] ports=jssc.SerialPortList.getPortNames();
        JMenuItem j;
        MenuButtons=new JButtonGroup();
        initComponents();
        for(String p: ports){
            j=new javax.swing.JCheckBoxMenuItem(p);
            MenuButtons.add(j);
            jMenu5.add(j);
        }
        indNum=0;
        genNum=1;
        Timer timer = new Timer();
        timer.schedule(new ExecuteEverySecond(), 0, 3000);
        jButton4ActionPerformed(null);
        time=System.currentTimeMillis();
        lastSeen=0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        SerialText = new javax.swing.JTextField();
        SendMessage = new javax.swing.JButton();
        AutoScroll = new javax.swing.JCheckBox();
        ClearText = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        NextGen = new javax.swing.JButton();
        NextInd = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        GetGen = new javax.swing.JButton();
        SaveFiles = new javax.swing.JButton();
        saveFileName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        GenNum = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        AutoSave = new javax.swing.JCheckBox();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        ManualControlToggle = new javax.swing.JToggleButton();
        jSlider1 = new javax.swing.JSlider();
        SpeedTextBox = new javax.swing.JTextField();
        ForwardsButton = new javax.swing.JButton();
        BackwardsButton = new javax.swing.JButton();
        LeftButton = new javax.swing.JButton();
        RightButton = new javax.swing.JButton();
        KeyControlButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        MenuExit = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        MenuConnect = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Serial Monitor", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N

        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        SerialText.setToolTipText("");
        SerialText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterKeyPressed(evt);
            }
        });

        SendMessage.setText("Send");
        SendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendMessage(evt);
            }
        });

        AutoScroll.setSelected(true);
        AutoScroll.setText("AutoScroll");
        AutoScroll.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                AutoScrollStateChanged(evt);
            }
        });

        ClearText.setText("Clear");
        ClearText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearSerialMonitor(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "600", "1200", "2400", "4800", "9600", "14400", "19200", "28800", "38400", "56000", "57600", "115200" }));
        jComboBox1.setSelectedIndex(11);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BaudRateChange(evt);
            }
        });

        jLabel1.setText("Baud Rate");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(SerialText, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SendMessage))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(AutoScroll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearText)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SerialText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SendMessage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AutoScroll)
                    .addComponent(ClearText)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextPane1.setAutoscrolls(false);
        jTextPane1.setFocusable(false);
        jScrollPane4.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        NextGen.setText("Next Generation");
        NextGen.setEnabled(false);
        NextGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextGenActionPerformed(evt);
            }
        });

        NextInd.setText("Next Individual");
        NextInd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextIndActionPerformed(evt);
            }
        });

        jTextField1.setText("1");
        jTextField1.setEnabled(false);

        jTextField2.setText("1");
        jTextField2.setEnabled(false);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel5.setText("/25");

        jButton1.setText("Individual Info");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Get Info");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Send Info");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setEnabled(false);
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton4.setText("Create Initial Gen");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Print Fitness");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintFitnessButton(evt);
            }
        });

        jButton6.setText("'The Belt'");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetFitness(evt);
            }
        });

        jButton7.setText("Go/Kill");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseButton(evt);
            }
        });

        backButton.setText("Back");
        backButton.setEnabled(false);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jButton9.setText("'The Carrot'");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImproveFitness(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7)
                    .addComponent(backButton))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NextGen)
                            .addComponent(NextInd, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4))
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addGap(128, 128, 128))
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NextInd)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jButton4)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton3)
                    .addComponent(jButton9))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NextGen)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton5)))
        );

        NextGen.getAccessibleContext().setAccessibleName("NextGen");

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        GetGen.setText("Load");
        GetGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetreveGen(evt);
            }
        });

        SaveFiles.setText("Save");
        SaveFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendGen(evt);
            }
        });

        saveFileName.setText("Test");
        saveFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileNameActionPerformed(evt);
            }
        });

        jLabel2.setText("File Name");

        jLabel3.setText("Documents/NetBeans/SuperSerial/saves/");

        jLabel4.setText(".bot");

        GenNum.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        GenNum.setText("1");
        GenNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenNumActionPerformed(evt);
            }
        });

        jLabel6.setText("/");

        jButton8.setText("Load Latest");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        AutoSave.setSelected(true);
        AutoSave.setText("Autosave");

        jButton10.setText("P-Load I");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("P-Load G");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(GetGen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SaveFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton11))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(GenNum, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addComponent(AutoSave))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(GenNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GetGen)
                    .addComponent(jButton8)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveFiles)
                    .addComponent(jButton11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AutoSave)
                .addGap(15, 15, 15))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Manual Control"));

        ManualControlToggle.setText("Manual Control");
        ManualControlToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManualControlToggle(evt);
            }
        });

        jSlider1.setMaximum(255);
        jSlider1.setValue(0);
        jSlider1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                SliderMoved(evt);
            }
        });

        SpeedTextBox.setText("0");
        SpeedTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpeedTextBoxActionPerformed(evt);
            }
        });
        SpeedTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                EnsureRangeSpeed(evt);
            }
        });

        ForwardsButton.setText("Forwards");
        ForwardsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ManualMove(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ManualStop(evt);
            }
        });

        BackwardsButton.setText("Backwards");
        BackwardsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ManualMove(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ManualStop(evt);
            }
        });

        LeftButton.setText("Left");
        LeftButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ManualMove(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ManualStop(evt);
            }
        });

        RightButton.setText("Right");
        RightButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ManualMove(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ManualStop(evt);
            }
        });

        KeyControlButton.setText("KeyControl");
        KeyControlButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                KeyControl(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ManualStop2(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ManualControlToggle)
                    .addComponent(LeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(BackwardsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ForwardsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(KeyControlButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(11, 11, 11)
                        .addComponent(RightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpeedTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ManualControlToggle)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SpeedTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(ForwardsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(KeyControlButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LeftButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(10, 10, 10)
                .addComponent(BackwardsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu2.setText("File");

        jMenuItem4.setText("Graph Menu");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        MenuExit.setText("Exit");
        MenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuExit(evt);
            }
        });
        jMenu2.add(MenuExit);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Tools");

        jMenu5.setText("SerialPort");
        jMenu4.add(jMenu5);

        MenuConnect.setText("Connect");
        MenuConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuConnect(evt);
            }
        });
        jMenu4.add(MenuConnect);

        jMenuItem3.setText("Disconnect");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Disconnect(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Attaches a listener to the serial port that is called whenever there is 
     * a change to a serial port
     */
    private void attachListener() {
        try {
            s.addEventListener(new SerialPortEventListener(){
                @Override
                public void serialEvent(SerialPortEvent e) {
                    String InputText;
                    if (e.getPortName().equals(comPort) && readFlag) {
                        try {
                            InputText = s.readString();
                            updateInd(InputText);
                            appendToPane(jTextPane1, InputText, Color.BLACK);
                            attachListener();
                        } catch (SerialPortException f) {
                            System.out.println(f.toString());
                        }
                    }
                }
            });
        } catch (SerialPortException e) {
            
        }
    }
    
    
    private void updateInd(String input){
        if(sendStringBool && input.contains("K")){
            sendStringBool=false;
            sendStringTimeout=0;
        }
        sensorRead+=input;
        if(sensorRead.contains("/") && sensorRead.contains("\\")){
            int start=sensorRead.indexOf("/");
            int end=sensorRead.indexOf("\\");
            String readings=sensorRead.substring(start+1, end);
            readings=readings.trim();
            getReading(readings);
            int last=sensorRead.length();
            try{
                sensorRead=sensorRead.substring(end+2, last);
            }catch(StringIndexOutOfBoundsException e){
                
            }
            boolean lineSeen=false;
            for(int i=0; i<8; i++){//updates sensorTimes, if sensor value is above 500, increment that senor time value
                if(sensorVals[i]>=500){
                    sensorTimes[i]++;
                    if(i<=1){
                        lastSeen=-1;
                    }else if(i>=7){
                        lastSeen=1;
                    }else{
                        lastSeen=0;
                    }
                    lineSeen=true;
                }
            }
            
            if(!lineSeen){
                if(lastSeen==-1){
                    sensorTimes[8]++;
                }else if(lastSeen==1){
                    sensorTimes[9]++;
                }
            }
        }
    }
    
    
    private void getReading(String in){
        String temp="";
        int n;
        for(int i=0; i<8; i++){
            n=-1;
            while(++n<in.length() && in.charAt(n)!=' '){
                temp+=in.charAt(n);
            }
            sensorVals[i]=stringToInt(temp);
            in=in.substring(n, in.length());
            if(in.length()!=0 && in.charAt(0)==' '){
                in=in.substring(1, in.length());
            }
            temp="";
        }
    }
    
    
    private int stringToInt(String in){
        in=in.trim();
        return Integer.parseInt(in);
    }
    
    /**
     * Initializes a serial port
     * @param serialPort String name of the serial port you want to connect to.  ex: comPort
     */
    private void initSerialPort(String serialPort){
        readFlag=true;
        Disconnect(null);
        s=new SerialPort(serialPort);
        try{
            s.openPort();
            setBaudRate(SerialPort.BAUDRATE_115200);
            s.setEventsMask(SerialPort.MASK_RXCHAR);
            attachListener();
        }catch(SerialPortException e){
            System.out.println(e.toString());
        }
    }
    
    /**
     * attempts to connect to the selected serial port
     */
    private void connect() {
        String str=MenuButtons.getSelectedName();
        System.out.println(str);
        if (s == null) {
            initSerialPort(str);
        } else if (!s.getPortName().equals(str)) {
            Disconnect(null);
            initSerialPort(str);
        } else {
            reconnect();
        }
    }
    
    /**
     * attempts to reconnect to the previously connected serial port
     */
    private void reconnect(){
        try{
            Disconnect(null);
            s.openPort();
        }catch(SerialPortException f){
            System.out.println(f.toString());
        }
    }
    
    /**
     * changes the baud rate for the serial connection
     * @param i baud rate you want.  normally 9800 or 115200
     */
    private void setBaudRate(int i){
        try{
            s.setParams(i,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
        }catch(SerialPortException e){
            
        }
    }
    
    /**
     * adds a string, msg, to pane tp with the color c
     * @param tp JTextPane you want to print to
     * @param msg the string you want to print
     * @param c color of the string you want to print
     */
    private void appendToPane(JTextPane tp, String msg, Color c)
    {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
        
        DefaultCaret caret = (DefaultCaret)jTextPane1.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }
    
    /**
     * sends a string out over serial communications
     * @param out string to send
     */
    private void send(String out){
        try{
            if(s!=null)
                s.writeString(out);
        }catch(SerialPortException f){
        }
    }
    
    /**
     * sends an integer out over serial communications
     * @param out integer to send
     */
    private void sendInt(int out){
        try{
            if(s!=null){
                s.writeInt(out);
                
            }
        }catch(SerialPortException f){
        }
    }
    
    /**
     * ensures that the speed typed into manual control is between 0 and 255
     * @param evt event that triggers this method
     */
    private void EnsureRangeSpeed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EnsureRangeSpeed
        if(SpeedTextBox.getText()!=null){
            try{
                speed=Integer.parseInt(SpeedTextBox.getText());
            }catch(NumberFormatException e){
                SpeedTextBox.setText("0");
            }
            if(speed>255){
                speed=255;
                SpeedTextBox.setText("255");
            }else if(speed<0){
                speed=0;
                SpeedTextBox.setText("0");
            }
            jSlider1.setValue(speed);
        }
    }//GEN-LAST:event_EnsureRangeSpeed

    /**
     * clears the JTextPane
     * @param evt event that triggers this method
     */
    private void ClearSerialMonitor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearSerialMonitor
        jTextPane1.setText(null);
    }//GEN-LAST:event_ClearSerialMonitor

    /**
     * Toggles the automatic scrolling on the JTextPane
     * (does not currently work)
     * @param evt 
     */
    private void AutoScrollStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_AutoScrollStateChanged
        if(AutoScroll.isEnabled()){
            jScrollPane4.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        }else{
            jScrollPane4.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        }
    }//GEN-LAST:event_AutoScrollStateChanged

    /**
     * calls MessageOut
     * sends the message in the text box and prints that message on the JTextPane
     * @param evt 
     */
    private void SendMessage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendMessage
        MessageOut();
    }//GEN-LAST:event_SendMessage

    /**
     * calls MessageOut
     * sends the message in the text box and prints that message on the JTextPane
     * @param evt 
     */
    private void EnterKeyPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterKeyPressed
        if(!SerialText.getText().equals(""))
            MessageOut();
    }//GEN-LAST:event_EnterKeyPressed

    /**
     * enables and disables buttons when the Manual Control button is pressed
     * @param evt 
     */
    private void ManualControlToggle(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManualControlToggle
        if(ManualControlToggle.isSelected()){
            //send("M");
            //appendToPane(jTextPane1,"M\n",Color.BLUE);
            NextGen.setEnabled(false);
            NextInd.setEnabled(false);
        }else{
            //send("C");
            //appendToPane(jTextPane1,"C\n",Color.BLUE);
            NextGen.setEnabled(true);
            NextInd.setEnabled(true);
        }
    }//GEN-LAST:event_ManualControlToggle

    /**
     * Handles the movement from button presses
     * @param evt 
     */
    private void ManualMove(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ManualMove
        if(s!=null && ManualControlToggle.isSelected()){
            send("M");
            appendToPane(jTextPane1,"M\n",Color.BLUE);
            if(evt.getSource().equals(ForwardsButton)){
                sendInt(0);
                sendInt(speed);
                sendInt(0);
                sendInt(speed);
                appendToPane(jTextPane1,"0 "+speed + " 0 " + speed + "\n",Color.BLUE);
            }else if(evt.getSource().equals(LeftButton)){
                sendInt(1);
                sendInt(speed);
                sendInt(0);
                sendInt(speed);
                appendToPane(jTextPane1,"1 "+speed + " 0 " + speed + "\n",Color.BLUE);
            }else if(evt.getSource().equals(RightButton)){
                sendInt(0);
                sendInt(speed);
                sendInt(1);
                sendInt(speed);
                appendToPane(jTextPane1,"0 "+speed +" 1 " + speed + "\n",Color.BLUE);
            }else if(evt.getSource().equals(BackwardsButton)){
                sendInt(1);
                sendInt(speed);
                sendInt(1);
                sendInt(speed);
                appendToPane(jTextPane1,"1 "+speed + " 1 " + speed + "\n",Color.BLUE);
            }
        }
    }//GEN-LAST:event_ManualMove

    /**
     * stops the robot when a button is released
     * @param evt 
     */
    private void ManualStop(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ManualStop
        if(s!=null && ManualControlToggle.isSelected()){
            send("M");
            appendToPane(jTextPane1,"M\n",Color.BLUE);
            sendInt(0);
            sendInt(0);
            sendInt(0);
            sendInt(0);
            appendToPane(jTextPane1,"0 0 0 0\n",Color.BLUE);
        }
    }//GEN-LAST:event_ManualStop

    /**
     * changes speed whenever the state of the slider has changed
     * @param evt 
     */
    private void SliderMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SliderMoved
        speed=jSlider1.getValue();
        SpeedTextBox.setText(""+speed);
    }//GEN-LAST:event_SliderMoved

    /**
     * changes the baud rate when value changed
     * @param evt 
     */
    private void BaudRateChange(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BaudRateChange
        try{
            int i;
            JComboBox cb = (JComboBox)evt.getSource();
            String s=(String)cb.getSelectedItem();
            i=Integer.parseInt(s);
            setBaudRate(i);
        }catch(NullPointerException e){
            System.out.println("No connection to modify.");
            jComboBox1.setSelectedIndex(11);
        }
    }//GEN-LAST:event_BaudRateChange

    /**
     * handles the movement based on key presses
     * @param evt 
     */
    private void KeyControl(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_KeyControl
        if(s!=null && ManualControlToggle.isSelected() && !keypressed){
            send("M");
            appendToPane(jTextPane1,"M\n",Color.BLUE);
            switch(evt.getKeyCode()){
                case KeyEvent.VK_W:
                case KeyEvent.VK_UP:
                    sendInt(0);
                    sendInt(speed);
                    sendInt(0);
                    sendInt(speed);
                    appendToPane(jTextPane1,"0 "+speed + " 0 " + speed + "\n",Color.BLUE);
                    break;
                case KeyEvent.VK_D:
                case KeyEvent.VK_RIGHT:
                    sendInt(1);
                    sendInt(speed);
                    sendInt(0);
                    sendInt(speed);
                    appendToPane(jTextPane1,"1 "+speed + " 0 " + speed + "\n",Color.BLUE);
                    break;
                case KeyEvent.VK_A:
                case KeyEvent.VK_LEFT:
                    sendInt(0);
                    sendInt(speed);
                    sendInt(1);
                    sendInt(speed);
                    appendToPane(jTextPane1,"0 "+speed + " 1 " + speed + "\n",Color.BLUE);
                    break;
                case KeyEvent.VK_S:
                case KeyEvent.VK_DOWN:
                    sendInt(1);
                    sendInt(speed);
                    sendInt(1);
                    sendInt(speed);
                    appendToPane(jTextPane1,"1 "+speed + " 1 " + speed + "\n",Color.BLUE);
                    break;
            }
            keypressed=true;
        }
    }//GEN-LAST:event_KeyControl

    /**
     * stops movement based on key presses
     * @param evt 
     */
    private void ManualStop2(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ManualStop2
        if(s!=null && ManualControlToggle.isSelected() && keypressed){
            send("M");
            appendToPane(jTextPane1,"M\n",Color.BLUE);
            sendInt(0);
            sendInt(0);
            sendInt(0);
            sendInt(0);
            appendToPane(jTextPane1,"0 0 0 0\n",Color.BLUE);
            keypressed=false;
        }
    }//GEN-LAST:event_ManualStop2

    /**
     * calls connect when it's menu item is selected
     * @param evt 
     */
    private void MenuConnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuConnect
        connect();
    }//GEN-LAST:event_MenuConnect

    /**
     * calls disconnect when it's menu item is selected
     * @param evt 
     */
    private void Disconnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Disconnect
        try{
            if(s!=null&&s.isOpened()){
                s.closePort();
            }
        }catch(SerialPortException e){
            System.out.println(e.toString());
        }
    }//GEN-LAST:event_Disconnect

    private void MenuExit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuExit
        Disconnect(null);
        System.exit(1);
    }//GEN-LAST:event_MenuExit

    /**
     * attempts to get a generation from the robot and save it to the computer
     * @param evt 
     */
    private void SendGen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendGen
        final JFrame fileChooserFrame = new JFrame("Save Generation");
        fileChooserFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        final JFileChooser FC=new JFileChooser();//add a FileFilter plz tks gby
        FC.setVisible(true);
        FC.setCurrentDirectory(new File("saves" + File.separator));
        
        FC.setApproveButtonText("Save");
        FC.setApproveButtonToolTipText("Saves current generation");
        
        FC.setMultiSelectionEnabled(false);
        
        
        BotFilter filter=new BotFilter();
        FC.addChoosableFileFilter(filter);
        FC.setFileFilter(filter);
        
        FC.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(FC.getSelectedFile()!=null){
                    if(FC.getCurrentDirectory().getName().equals("saves")){
                        appendToPane(jTextPane1,"NEW SAVE\n",Color.BLACK);
                    }
                    Generation temp=G;
                    if(FC.getSelectedFile()!=null){
                        M.generationSave(G,FC.getSelectedFile().getName());
                        
                    }else{
                        M.generationSave(G,""+G.getGeneration());
                    }
                    appendToPane(jTextPane1,"SAVED\n",Color.BLACK);
                }
                
                fileChooserFrame.setVisible(false);
                fileChooserFrame.dispose();
            }
        });
        
        
        
        fileChooserFrame.add(FC);
        
        fileChooserFrame.pack();
        fileChooserFrame.setVisible(true);
        
        
        
        
        
        
        try{
            M.generationSave(G,saveFileName.getText());
            appendToPane(jTextPane1,"SAVED\n",Color.BLACK);
        }catch(NullPointerException e){
            System.out.println("SendGen failed: No generation to send");
        }
    }//GEN-LAST:event_SendGen

    /**
     * attempts to get a generation from a save file and upload it to the robot
     * @param evt 
     */
    private void RetreveGen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetreveGen
        final JFrame fileChooserFrame = new JFrame("Load Generation");
        fileChooserFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        final JFileChooser FC=new JFileChooser();//add a FileFilter plz tks gby
        FC.setVisible(true);
        FC.setCurrentDirectory(new File("saves" + File.separator));
        
        BotFilter filter=new BotFilter();
        FC.addChoosableFileFilter(filter);
        FC.setFileFilter(filter);
        
        FC.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(FC.getSelectedFile()!=null){
                    Generation temp=G;
                    try{
                        G=M.getGeneration(FC.getSelectedFile());
                    }catch(IOException e){
                        G=temp;
                        System.out.println("Failed to read from file!!!");
                    }
                }
                
                indNum=1;
                genNum=G.getGeneration();
                I=G.getIndividual(0);
                jTextField1.setText(""+indNum);
                jTextField2.setText(""+genNum);
                NextInd.setEnabled(true);
                NextGen.setEnabled(false);
                appendToPane(jTextPane1,"LOADED\n",Color.BLACK);
                displayInd();
                
                fileChooserFrame.setVisible(false);
                fileChooserFrame.dispose();
            }
        });
        
        
        
        fileChooserFrame.add(FC);
        
        fileChooserFrame.pack();
        fileChooserFrame.setVisible(true);
        
    }//GEN-LAST:event_RetreveGen

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(G!=null && G.getIndividual(indNum-1)!=null){
            String s="";
            for(int[] Row: G.getIndividual(indNum-1).Genetics){
                for(int Col: Row){
                    s+=Col+" ";
                }
                s+='\n';
            }
            appendToPane(jTextPane1,s,Color.GREEN);
        }
        displayInd();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        getStringInd();
        G.replaceIndividual(I, indNum);
        displayInd();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(G!=null && G.getIndividual(indNum)!=null){
            sendStringInd(G.getIndividual(indNum));
            I=G.getIndividual(indNum);
            sendStringTimeout=0;
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void SpeedTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpeedTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SpeedTextBoxActionPerformed

    private void NextIndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextIndActionPerformed
        //if(hasValue(sensorTimes)){
        //    I.setSensorTimes(sensorTimes);
        //    sensorTimes=new double[]{0,0,0,0,0,0,0,0};
        //}
        I.setSensorTimes(sensorTimes);
        I.setLastSeen(lastSeen);
        sensorTimes=new int[]{0,0,0,0,0,0,0,0,0,0};
        I.recalcFitness();
        G.replaceIndividual(I, indNum);
        indNum++;
        if(indNum<G.getNumIndividuals())
            I=G.getIndividual(indNum);
        GetGen.setEnabled(false);
        SaveFiles.setEnabled(false);
        if(indNum>=G.getNumIndividuals()){
            NextInd.setEnabled(false);
            NextGen.setEnabled(true);
            GetGen.setEnabled(true);
            SaveFiles.setEnabled(true);
        }
        jTextField1.setText(""+(indNum+1));
        displayInd();
        lastSeen=0;
        appendToPane(jTextPane1,"NEXT INDIVIDUAL\n",Color.BLACK);
        backButton.setEnabled(true);
    }//GEN-LAST:event_NextIndActionPerformed

    
    private boolean hasValue(double d[]){
        boolean t=false;
        for(double n: d){
            if(n!=0){
                t=true;
            }
        }
        return t;
    }
    
    private void NextGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextGenActionPerformed
        //saves
        if(AutoSave.isSelected()){
            try{
                M.generationSave(G,saveFileName.getText());
                appendToPane(jTextPane1,"AUTO-SAVE\n",Color.BLACK);
            }catch(NullPointerException e){
                System.out.println("SendGen failed: No generation to send");
            }
        }
        //moves to next gen
        genNum++;
        G.nextGen();
        NextInd.setEnabled(true);
        NextGen.setEnabled(false);
        GetGen.setEnabled(false);
        SaveFiles.setEnabled(false);
        jTextField2.setText(""+genNum);
        indNum=0;
        jTextField1.setText(""+(indNum+1));
        displayInd();
        appendToPane(jTextPane1,"NEXT GENERATION\n",Color.BLACK);
        GenNum.setText(""+genNum);
        backButton.setEnabled(false);
    }//GEN-LAST:event_NextGenActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        I=new Individual();
        if(G==null)
            G= new Generation(25,1);
        G.nextGen();
        G.setGeneration(1);
        displayInd();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void PrintFitnessButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintFitnessButton
        if(G!=null){
            for(int i=0; i<25; i++){
                appendToPane(jTextPane1,"Individual "+i+":"+G.getIndividual(i).getFitness()+"\n",Color.GREEN);
            }
            appendToPane(jTextPane1,"\n",Color.GREEN);
        }
    }//GEN-LAST:event_PrintFitnessButton

    private void ResetFitness(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetFitness
        sensorTimes=new int[]{0,0,0,0,0,0,0,0,0,0};
        appendToPane(jTextPane1,"WHIPED\n",Color.BLACK);
    }//GEN-LAST:event_ResetFitness

    private void PauseButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseButton
        send("P");
        appendToPane(jTextPane1,"P\n",Color.BLUE);
    }//GEN-LAST:event_PauseButton

    private void saveFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveFileNameActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        final JFrame fileChooserFrame = new JFrame("Load Generation");
        fileChooserFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        final JFileChooser FC=new JFileChooser();//add a FileFilter plz tks gby
        FC.setVisible(true);
        FC.setCurrentDirectory(new File("saves" + File.separator));
        
        TopFilter filter=new TopFilter();
        FC.addChoosableFileFilter(filter);
        FC.setFileFilter(filter);
        
        FC.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(FC.getSelectedFile()!=null){
                    Generation temp=G;
                    try{
                        int latest=M.getLatest(FC.getSelectedFile());
                        String path=FC.getSelectedFile().getParent();
                        G=M.getGeneration(latest, path.substring(path.lastIndexOf("\\")+1));
                        
                    }catch(IOException e){
                        G=temp;
                        System.out.println("Failed to read from file!!!");
                    }
                }
                
                indNum=1;
                genNum=G.getGeneration();
                I=G.getIndividual(0);
                jTextField1.setText(""+indNum);
                jTextField2.setText(""+genNum);
                NextInd.setEnabled(true);
                NextGen.setEnabled(false);
                appendToPane(jTextPane1,"LOADED\n",Color.BLACK);
                displayInd();
                
                fileChooserFrame.setVisible(false);
                fileChooserFrame.dispose();
            }
        });
        
        
        
        fileChooserFrame.add(FC);
        
        fileChooserFrame.pack();
        fileChooserFrame.setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void GenNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GenNumActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        NextInd.setEnabled(true);
        sensorTimes=new int[]{0,0,0,0,0,0,0,0,0,0};
        indNum--;
        if(indNum>=0)
            I=G.getIndividual(indNum);
        GetGen.setEnabled(false);
        SaveFiles.setEnabled(false);
        if(indNum<=0){
            backButton.setEnabled(false);
        }
        jTextField1.setText(""+(indNum+1));
        displayInd();
        lastSeen=0;
        appendToPane(jTextPane1,"PREVIOUS INDIVIDUAL\n",Color.BLACK);
    }//GEN-LAST:event_backButtonActionPerformed

    private void ImproveFitness(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImproveFitness
        for(int i=0; i<8; i++){
            sensorTimes[i]+=5;
        }
        appendToPane(jTextPane1,"FED\n",Color.BLACK);
    }//GEN-LAST:event_ImproveFitness

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        GraphType selectG=new GraphType();
        selectG.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        final JFrame fileChooserFrame = new JFrame("Load Generation");
        fileChooserFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        final JFileChooser FC=new JFileChooser();//add a FileFilter plz tks gby
        FC.setVisible(true);
        FC.setCurrentDirectory(new File("saves" + File.separator));
        
        TxtFilter filter=new TxtFilter();
        FC.addChoosableFileFilter(filter);
        FC.setFileFilter(filter);
        
        FC.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(FC.getSelectedFile()!=null){
                    Generation temp=G;
                    try{
                        G=M.getIndPlaintext(FC.getSelectedFile());
                    }catch(IOException e){
                        G=temp;
                        System.out.println("Failed to read from file!!!");
                    }
                }
                
                indNum=1;
                genNum=G.getGeneration();
                I=G.getIndividual(0);
                jTextField1.setText(""+indNum);
                jTextField2.setText(""+genNum);
                NextInd.setEnabled(true);
                NextGen.setEnabled(false);
                appendToPane(jTextPane1,"LOADED\n",Color.BLACK);
                displayInd();
                
                fileChooserFrame.setVisible(false);
                fileChooserFrame.dispose();
            }
        });
        
        
        
        fileChooserFrame.add(FC);
        
        fileChooserFrame.pack();
        fileChooserFrame.setVisible(true);
        
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        final JFrame fileChooserFrame = new JFrame("Load Generation");
        fileChooserFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        final JFileChooser FC=new JFileChooser();//add a FileFilter plz tks gby
        FC.setVisible(true);
        FC.setCurrentDirectory(new File("saves" + File.separator));
        
        TxtFilter filter=new TxtFilter();
        FC.addChoosableFileFilter(filter);
        FC.setFileFilter(filter);
        
        FC.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(FC.getSelectedFile()!=null){
                    Generation temp=G;
                    try{
                        G=M.getGenerationPlaintext(FC.getSelectedFile());
                    }catch(IOException e){
                        G=temp;
                        System.out.println("Failed to read from file!!!");
                    }
                }
                
                indNum=1;
                genNum=G.getGeneration();
                I=G.getIndividual(0);
                jTextField1.setText(""+indNum);
                jTextField2.setText(""+genNum);
                NextInd.setEnabled(true);
                NextGen.setEnabled(false);
                appendToPane(jTextPane1,"LOADED\n",Color.BLACK);
                displayInd();
                
                fileChooserFrame.setVisible(false);
                fileChooserFrame.dispose();
            }
        });
        
        
        
        fileChooserFrame.add(FC);
        
        fileChooserFrame.pack();
        fileChooserFrame.setVisible(true);
    }//GEN-LAST:event_jButton11ActionPerformed
    
    private void printGen(Generation G, Color C){
        for(int i=0;i<G.getNumIndividuals();i++){
            Individual I=G.getIndividual(i);
            String s="";
            s+="Individual: "+i+"\n";
            s+="Genome:\n";
            for(int k=0;k<I.getGenetics().length;k++){
                for(int j=0;j<I.getGenetics()[k].length;j++){
                    s+=I.getGenetics()[k][j]+" ";
                }
                s+="\n";
            }
            s+="SensorTimes:\n";
            for(int k=0;k<I.getSensorTimes().length;k++){
                s+=I.getSensorTimes()[k]+" ";
            }
            s+="\n";
            appendToPane(jTextPane1,s,C);
        }
    }
    
    /**
     * attempts to send a generation to the robot
     * @param out 
     */
    private void transmitGen(Generation out){
        int sum;
        send("T");
        appendToPane(jTextPane1,"T\n",Color.BLUE);
        sendInt(out.getGeneration());
        sendInt(out.getNumIndividuals());
        sum=out.getGeneration()+out.getNumIndividuals();
        for(int i=0;i<out.getNumIndividuals();i++){
            int[][] D=out.getIndividual(i).getGenetics();
            for(int[] H: D){
                for(int N: H){
                    sendInt(N);
                    sum+=N;
                }
            }
        }
        sendInt(sum);
        send(" ");
    }
    
    private void transmitInd(Individual out){
        send("T");
        appendToPane(jTextPane1,"T\n",Color.BLUE);
        sendInt(0);
        int[][] D=out.getGenetics();
        for(int[] H: D){
            for(int N: H){
                sendInt(N);
            }
        }
    }
    
    /**
     * attempts to get a generation from the robot
     * @return the Generation that is gotten
     */
    private Generation receiveGen() throws Exception{
        int sum=0, check;
        readFlag=false;
        send("R");
        appendToPane(jTextPane1,"R\n",Color.BLUE);
        
        
        if(s!=null){
            try{
                int timeout=0;
                while(s.getInputBufferBytesCount()<2 && timeout++ < 50){
                    try {
                        Thread.sleep(100);
                    } catch(InterruptedException ex) {
                        Thread.currentThread().interrupt();
                    }
                }
                int genNum=byteToInt(s.readBytes(2));
                int numInd=byteToInt(s.readBytes(2));
                sum+= genNum + numInd;

                G=new Generation(numInd,genNum);
                Individual I;

                for(int i=0;i<numInd;i++){
                    
                    timeout=0;
                    while(s.getInputBufferBytesCount()<40 && timeout++ < 50){
                        try {
                            Thread.sleep(100);
                        } catch(InterruptedException ex) {
                            Thread.currentThread().interrupt();
                        }
                    }
                    
                    int[][] GN=new int[2][10];
                    for(int j=0;j<10;j++){
                        GN[0][j]=byteToInt(s.readBytes(2));
                        sum+=GN[0][j];
                    }
                    for(int j=0;j<10;j++){
                        GN[1][j]=byteToInt(s.readBytes(2));
                        sum+=GN[1][j];
                    }
                    I=new Individual(GN,i);
                    G.addIndividual(I);
                    check=byteToInt(s.readBytes(2));
                    if(check!=sum){
                        Exception E=new Exception();
                        throw E;
                    }
                }
            }catch(SerialPortException f){
                System.out.println("receiveGen failed: SerialPortException");
                G=null;
            }
        }else{
            System.out.println("receiveGen failed: serial does not exist");
            G=null;
        }
        readFlag=true;
        return G;
    }
    
    private Individual receiveInd(){
        readFlag=false;
        send("R");
        appendToPane(jTextPane1,"R\n",Color.BLUE);
        Individual I=new Individual();
        try{
            int timeout=0;
                while(s.getInputBufferBytesCount()<1 && timeout++ < 50){
                    try {
                        Thread.sleep(100);
                    } catch(InterruptedException ex) {
                        Thread.currentThread().interrupt();
                    }
                }
                int genNum=byteToInt(s.readBytes(2));
                for(int i=0; i<2; i++){
                    for(int j=0; j<10; j++){
                        timeout=0;
                        while(s.getInputBufferBytesCount()<1 && timeout++ < 50){
                            try {
                                Thread.sleep(100);
                            } catch(InterruptedException ex) {
                                Thread.currentThread().interrupt();
                            }
                        }
                        I.Genetics[i][j]=byteToInt(s.readBytes(2));
                    }
                }
                
                
        }catch(SerialPortException f){
            System.out.println("receiveGen failed: SerialPortException");
        }catch(NullPointerException n){
            System.out.println("receiveGen failed: No current connection");
        }
        readFlag=true;
        return I;
    }
    
    public void sendStringInd(Individual out){
        String str="T";
        int[][] D=out.getGenetics();
        for(int[] H: D){
            str+="{";
            for(int N: H){
                str+=N+" ";
            }
            str+="}";
            send(str);
            appendToPane(jTextPane1,str+"\n",Color.BLUE);
            str="";
            try{
                Thread.sleep(1000);
            }catch(InterruptedException e){
                
            }
        }
        time=System.currentTimeMillis();
        sendStringBool=true;
    }
    
    private void getStringInd(){
        String in;
        readFlag=false;
        I=new Individual();
        try{
            s.purgePort(s.PURGE_RXCLEAR);
            s.purgePort(s.PURGE_TXCLEAR);
            send("R");
            try{
                Thread.sleep(4000);
            }catch(InterruptedException ex) {
                Thread.currentThread().interrupt();
            }
            appendToPane(jTextPane1,"R\n",Color.BLUE);
            in=s.readString();
            if(in!=null){
                I.Genetics=getVals(in);
            }else{
                getStringInd();
            }
        }catch(SerialPortException f){
            System.out.println("receiveGen failed: SerialPortException");
        }catch(NullPointerException n){
            System.out.println("receiveGen failed: No current connection");
        }
        readFlag=true;
    }
    
    private int[][] getVals(String input){
        if(input.contains("{") && input.contains("}")){
            int start=input.indexOf("{");
            int end=input.indexOf("}");
            String readings=input.substring(start+1, end);
            readings=readings.trim();
            return getVals2(readings);
        }
        return null;
    }
    
    
    private int[][] getVals2(String in){
        int out[][]=new int[2][10];
        String temp="";
        int n;
        for(int i=0; i<25; i++){
            n=-1;
            while(++n<in.length() && in.charAt(n)!=' '){
                temp+=in.charAt(n);
            }
            out[(int)Math.floor(i/10)][i%10]=stringToInt(temp);//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            in=in.substring(n, in.length());
            if(in.length()!=0 && in.charAt(0)==' '){
                in=in.substring(1, in.length());
            }
            temp="";
        }
        return out;
    }
    
    private int byteToInt(byte[] b){
        return (b[0] << 8) | (b[1] & 0xFF);
    }
    
    private void displayInd(){
        if(G!=null && indNum<G.getNumIndividuals() && G.getIndividual(indNum)!=null){
            String s="~";
            for(int[] Row: G.getIndividual(indNum).Genetics){
                for(int Col: Row){
                    s+=Col+" ";
                }
                s+="~";
            }
            jTextField3.setText(s);
        }
    }
    
    /**
     * sends a message to the robot and prints it to the JTextPane
     */
    private void MessageOut(){
        String out=SerialText.getText();
        send(out);
        appendToPane(jTextPane1,out + "\n",Color.RED);
        SerialText.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SuperSerialGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SuperSerialGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SuperSerialGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SuperSerialGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SuperSerialGUI().setVisible(true);
            }
        });
    }

    
    public class ExecuteEverySecond extends TimerTask {
        @Override
        public void run() {
           if(sendStringBool && (sendStringTimeout < 5) && (System.currentTimeMillis()-time) > 2000){
               sendStringInd(I);
               sendStringTimeout++;
           }
        }
     }
    
    
    
    private JButtonGroup MenuButtons;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AutoSave;
    private javax.swing.JCheckBox AutoScroll;
    private javax.swing.JButton BackwardsButton;
    private javax.swing.JButton ClearText;
    private javax.swing.JButton ForwardsButton;
    private javax.swing.JTextField GenNum;
    private javax.swing.JButton GetGen;
    private javax.swing.JButton KeyControlButton;
    private javax.swing.JButton LeftButton;
    private javax.swing.JToggleButton ManualControlToggle;
    private javax.swing.JMenuItem MenuConnect;
    private javax.swing.JMenuItem MenuExit;
    private javax.swing.JButton NextGen;
    private javax.swing.JButton NextInd;
    private javax.swing.JButton RightButton;
    private javax.swing.JButton SaveFiles;
    private javax.swing.JButton SendMessage;
    private javax.swing.JTextField SerialText;
    private javax.swing.JTextField SpeedTextBox;
    private javax.swing.JButton backButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField saveFileName;
    // End of variables declaration//GEN-END:variables
}
